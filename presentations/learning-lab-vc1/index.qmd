---
title: "Version Control Tutorial: Basics"
subtitle: "Working with Git Bash, GitHub, and making file changes"
format:
#   html: default
  revealjs:
    code-line-numbers: false
    # output-file: slides-index.html
---

## What is Version Control?

```{=html}
<style>
.semi-transparent {
  opacity: 0.4;
}
</style>
```


::: {.notes}
Sort of like how Microsoft Word will periodically save versions that you can return to.
:::

__Version control__ is a way of recording changes to a file or set of files over time so that you can recall specific versions later.

Most common VC systems:

* ::: {.fragment .highlight-green}
Git 
:::
* Mercurial
* Subversion (SVN)

## Why should I use Git?
::: {style="font-size: 0.85em"}

::: {.incremental}
* _Peace of Mind_ - work is stored safely and can be easily recalled
* _Collaboration_ - multiple versions can be developed in tandem, allowing parallel feature development
* _Review and Discussion_ - GitHub allows for easy review of code changes before incorporating into the main branch of the repository
* _Documentation_ - shows when, why, and by whom specific changes were made
* _Consolidation_ - Project code and documentation can be stored in the same location.
* _Preservation and Access_ - Easy web browser access to all code versions, can control whether public or private.
:::

:::

## Git vs GitHub

::: {.notes}
Git works by monitoring the changes of the contents of an otherwise ordinary file folder, called a repository.
In a Git repository, a user can tell Git which file changes to keep, which to discard, and can label those changes, go back to previous file versions, and much more!
:::

![Git Logo](../../images/git-logo.png){height=0.7in}\

Git is a popular __version control system__, which is software we can download and use on our computer.

::: {.fragment}
![GitHub Logo](../../images/github-logo.png){height=0.7in}\

GitHub is a website that __hosts Git repositories__, and provides convenient ways to host documentation, discuss code changes, and report bugs.
:::

## Git Bash {auto-animate="true"}

There are many ways of using the Git software, but we will focus on __Git Bash__, a command line Git interface that comes with Git.

First, open Git Bash.  (Hit the windows key and type "bash")

Let's start by asking Git what version we are running:

```bash
$ git --version
```

## Git Bash {auto-animate="true"}

::: {.notes}
Git Bash is __one__ way to access Git.
It is not the only way, nor necessarily the way you will always use.
Many common code editors like RStudio and Visual Studio Code have some form of Git interface built in, and you may consider using those.
For the tutorial, however, we will focus on Git Bash because it comes with Git and it is good for teaching the fundamentals of Git.
:::

There are many ways of using the Git software, but we will focus on __Git Bash__, a command line Git interface that comes with Git.

First, open Git Bash.  (Hit the windows key and type "bash")

Let's start by asking Git what version we are running:

```bash
$ git --version
git version 2.47.0.windows.2
```

## Introduce Yourself to Git

Now, let's enter the following commands

```bash
$ git config --global user.name 'Your Name Here'
$ git config --global user.email 'your-name-here@rff.org'
```

Now, Git will include your name and email when you publish changes!  Let's take a look at what configuration options Git has set. 

```bash
$ git config --global --list
user.name=Ethan Russell
user.email=erussell@rff.org
```

## __Creating__ a Repository in GitHub {auto-animate="true"}

1. Navigate to `github.com`, log in, and click the plus button in the top right corner

![Creating a Repository](../../images/git-create-repo.png)\

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
GitHub provides a structure called "Organizations", which can have multiple users with different roles, and can even own repositories.  Your project teams can discuss whether or not it makes sense to have a GitHub organization.

So, for the owner, you could either select your user account, or an organization you are a member of.
The repository owner will show up in the URL of the repository
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. Select the repository owner, yourself!

The owner's name will appear in the URL of the repository:

`github.com/<owner-name>/<repository-name>`

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
We recommend all lowercase names with dashes separating words, like `my-repo-name`.
The only exception is when a programming language’s best practices prescribe a specific repository naming convention.
(i.e. julia package repositories are supposed to be camelcase as in `MyRepoName.jl`)
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. Choose a repository name.

We recommend choosing something concise and descriptive, all lowercase, with dashes separating words, like `my-repo-name`.

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
We recommend all lowercase names with dashes separating words, like `my-repo-name`.
The only exception is when a programming language’s best practices prescribe a specific repository naming convention.
(i.e. julia package repositories are supposed to be camelcase as in `MyRepoName.jl`)
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. Choose a repository name.

We recommend choosing something concise and descriptive, all lowercase, with dashes separating words, like `my-repo-name`.


## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
Generally, choose private for repositories that will contain sensitive information, and public if the project requires it to be public.
It is easy to change from private to public later on, so when in doubt choose private.

For public repositories, you would also need to select which software license to use, and you can find more information about that on the website.
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. [Choose a repository name.]{.semi-transparent}

4. Choose whether the repository is to be public or private.

Generally, choose private for repositories that will contain sensitive information, and public if the project requires it to be public.  When in doubt, choose private!

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
This will create a file called `README.md` located in the repository's root folder, where you can later add basic documentation for the repository.
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. [Choose a repository name.]{.semi-transparent}

4. [Choose whether the repository is to be public or private.]{.semi-transparent}

5. Check the box to add a README file.

We will use this to store documentation for the repository.

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
A `.gitignore` file specifies certain file types that Git will not track the changes of, by default.
For example, it is best to ignore an auto-created config file made by R studio that is user-specific.
Generally it is a good idea to select the .gitignore template for the programming language you will be using.
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. [Choose a repository name.]{.semi-transparent}

4. [Choose whether the repository is to be public or private.]{.semi-transparent}

5. [Check the box to add a README file.]{.semi-transparent}

6. Choose a `.gitignore` template from the dropdown menu.

Select the .gitignore template for the programming language you will be using.

## __Creating__ a Repository in GitHub {auto-animate="true"}

::: {.notes}
This should take you to the home page of your new repository
:::

1. [Navigate to `github.com`, log in, and click the plus button in the top right corner]{.semi-transparent}

2. [Select the repository owner, yourself!]{.semi-transparent}

3. [Choose a repository name.]{.semi-transparent}

4. [Choose whether the repository is to be public or private.]{.semi-transparent}

5. [Check the box to add a README file.]{.semi-transparent}

6. [Choose a `.gitignore` template from the dropdown menu.]{.semi-transparent}

7. Click the "Create Repository" button!!

## __Cloning__ Your First Repository With Git

::: {.notes}
Now that we've made a remote repository, let's get it copied onto our computer.
Copying a remote Git repository is called _cloning_.
This process will work the same way for any existing repository, including the one that we just made.
:::

__Cloning__ = making a copy of a repository onto a computer.

## __Cloning__ Your First Repository With Git

::: {.notes}
First, it's important to choose a good file location to store the git repository.  While it's not required, many people like to have a single folder to store all of their Git repositories.  An alternative would be to store the Git repository in an associated project folder.

Git Bash has a _working directory_, which is the location that it is operating in.  To see what the current working directory is, we can enter the `pwd` command, which stands for **p**rimary **w**orking **d**irectory.
:::

1. Choose where to store the git repository and navigate there.

This could be in a dedicated "repositories" folder on your C drive, or it could be within a team's project folder.

To navigate there, use the `cd` command in Git Bash:

```bash
cd `C:/Users/<my-user-name>/repos`
```
::: {.callout-note}
It is necessary to use single quotes for filenames in Git Bash if there is a space in the path.
:::

## __Cloning__ Your First Repository With Git

::: {.notes}
:::

1. [Choose where to store the git repository and navigate there.]{.semi-transparent}

2. Copy the repository URL to the clipboard

From the repository home page, click the button labeled `< > Code`, then copy the URL to clipboard by clicking the logo with intersecting squares.


## __Cloning__ Your First Repository With Git

::: {.notes}
:::

1. [Choose where to store the git repository and navigate there.]{.semi-transparent}

2. [Copy the repository URL to the clipboard]{.semi-transparent}

3. Enter the `git clone <repo-url>` command in Git Bash.

In the Git bash window, type `git clone ` then paste in the repository URL from your clipboard by right-clicking.  Altogether this would look like:
  
```bash
git clone https://github.com/<owner-name>/<repository-name>
```

You will need to enter your GitHub credentials if it is private repository.

